[{"id":0,"href":"/posts/garme_programming/","title":"Game Programming in C","section":"Resources","content":"Raylib\nSee https://www.raylib.com/index.html.\nCode for snake game in raylib: https://github.com/raysan5/raylib-games/blob/master/classics/src/snake.c\nAllegro\nhttps://liballeg.org/\nQuickstart\n"},{"id":1,"href":"/posts/installingGCC/","title":"Installing GCC","section":"Resources","content":" Installing gcc # This tutorial will be a quick walkthrough on installing gcc on different OS. We recommend you try installing gcc on your own before the start of classes. If, for some reason, you are unable to install gcc, then we will help you in the first tutorial session. We also recommend you install some text editor (VS Code for example).\nWe recommend the usage of Linux as this would be advantageous for your future courses as well. linux Linux (Ubuntu 22.04) # For Linux-based systems, gcc usually comes installed by default.\nCheck if gcc is installed on Ubuntu by running the command: $ gcc --version\nIf running this shows a version (For eg 13.1 or say any other version) then you are good to go.\nOtherwise, if you see an error that reads “command not found” or something similar, run the following commands:\n$ sudo apt update\n$ sudo apt install build-essential\nAfter running this, check if gcc is installed by running:\n$ gcc --version\nmac MacOS # For Mac-based systems, first start with installing homebrew (if not installed).\n$ /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot;\nAfter installing homebrew, you simply have to run:\n$ brew install gcc\nAfter running this, check if gcc is installed by running:\n$ gcc --version\nThis should show the path in which gcc has been installed on your Mac.\nwindows Windows # In Windows, C programs can be compiled using the MinGW C compiler.\nFor installation details, refer: https://www.scaler.com/topics/c/c-compiler-for-windows/\nAlternatively, you can install WSL or a Virtual Machine to have a Linux-like environment.\n"},{"id":2,"href":"/posts/linux_tools_course/","title":"Linux Tools Course","section":"Resources","content":"To get familiar with Linux tools that are generally helpful for computer science, please go through the material here: https://missing.csail.mit.edu/\n"},{"id":3,"href":"/posts/linear_algebra_in_c/","title":"Linear Algebra in C","section":"Resources","content":"See implementation of a linear algebra library in C here: https://www.andreinc.net/2021/01/20/writing-your-own-linear-algebra-matrix-library-in-c\n"},{"id":4,"href":"/posts/video_lectures/","title":"Video Lectures from Elsewhere","section":"Resources","content":"You can find some video lectures on c programming from other universities bellow:\nUni. of Nebraska, Lincon Harvard\nhttps://cs50.harvard.edu/x/2023/\nhttps://www.youtube.com/watch?v=8mAITcNt710 "},{"id":5,"href":"/docs/course_material/lectures/1/","title":"01 Introduction","section":"Lectures","content":" Welcome to CS0.101 Computer Programming # Girish Varma\nhttps://cpro-iiit.github.io/docs/course_material/lectures/1/05_08.pdf\nAdmin Stuff # Teaching Team # Instructors (3): Girish Varma, Abhishek Deshpande, Sandeep Nagar\nTAs (20): Devesh, Sirisetti, Mayaank, Priet, Harshvardhan, Shreya, Annamalai, Talib, Druvitha, Aaditya, Tanishq, Sahil, Karan, Manan, Madhav, Yash, Khooshi, Poorvi, Harshit, Sarthak\nHow to ace this course? # 12 Weeks Course (excluding exam/holiday/prep weeks) ​\nSession Time (hrs) Marks (%) 3 Lectures 3 x 1 - 1 Tutorial 1 x 1 - 1 Lab 1 x 3 2 Reading/Practice 3 Assignment 3 2.5 Total Time per week: 13 hrs\nTotal Problem solving per week: 3 (Lab) + 2 (Tut) + 2 (Assgn) 2 (Practice) = 9\nEvaluation # Component Marks (%) Lab 10 x 2 Best 10 of * Assignments 6 x 5 6 in No. Mid Term 8 + 12 Written + Lab End Sem 10 + 20 Written + Lab 80% marks for programming problem solving.\nSolve 100 problems over the entire course.\nWebsites # Course Website: https://cpro-iiit.github.io/ All lecture/lab/tutorial material is posted. Additional information, links to other courses/tutorials on the web.\nAutolab Problem Server: https://pingala.iiit.ac.in/ All lab/assignment/tutorials problems released here. More about this in the lab.\nIntroduction to Computer Programming # What this Course is about? # Genie needs to be instructed precisely, otherwise it will not respond!\nIt will precisely do, what you told it to do! If you meant something else and that was your problem.\nGenie only understand a language, which has no scope for confusion/ambiguity.\nBasic Computer Organisation # Programming Languages # Intro to C Programming # Hello World! C Program # main.c file. Try it out at https://www.programiz.com/c-programming/online-compiler/\n// 1. This line is a comment that is ignored by compiler. // 2. include standard library for input/output. Allows to print to shell #include \u0026lt;stdio.h\u0026gt; // 3. execution start inside this **function** named main. int main() { // start of main function // 4. prints to the shell printf(\u0026#34;Hello, world\\n\u0026#34;); return 0; /* 5. returns integer 0 */ } // end of main function Running the Program # Run gcc compiler to get executable file main gcc main.c -o main Run the executable main ./main What just happened? # Using Makefile to do it together # Create a file Makefile (one time step) // Makefile run: gcc main.c -o main ./main run make run Next time, after you modify main.c, only make run needs to be done.\nReading # Chapter 1 upto Section 1.4,\nChapter 2 upto Section 2.2 Computer Science: A Structured Programming Approach Using C Behrouz A. Forouzan, Richard F. Gilberg\nFundas for doing Programming! # Tresure Hunt/Dumb charades! # Dont be afraid to make guesses! Dont be afraid to try out guesses! Failed guess gives clues. Learn from them! You will eventually learn to make more clever guesses. Thanks # "},{"id":6,"href":"/docs/course_material/lectures/2/","title":"02 Constants, Data Types, Variables, Expressions","section":"Lectures","content":" C Programming Basics # Constants, Data Types, Variables, Expressions, Input\nGirish Varma\nhttps://cpro-iiit.github.io/docs/course_material/lectures/2/07_08.pdf\nHello World! C Program # main.c file. Try it out at https://www.programiz.com/c-programming/online-compiler/\n// 1. This line is a comment that is ignored by compiler. // 2. include standard library for input/output. Allows to print to shell #include \u0026lt;stdio.h\u0026gt; // 3. execution start inside this **function** named main. int main() { // start of main function // 4. prints to the shell printf(\u0026#34;Hello, world\\n\u0026#34;); return 0; /* 5. returns integer 0 */ } // end of main function Running the Program # Run gcc compiler to get executable file main gcc main.c -o main Run the executable main ./main What just happened? # Using Makefile to do it together # Create a file Makefile (one time step) // Makefile run: gcc main.c -o main ./main run make run Next time, after you modify main.c, only make run needs to be done.\nConstants, Datatypes, Variables # Constants # https://www.programiz.com/online-compiler/48tOa2UyvDuJH\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;printing the integer constant %d\\n\u0026#34;, 1); printf(\u0026#34;printing the integer constant %d\\n\u0026#34;, 100); printf(\u0026#34;printing the float constant %f\\n\u0026#34;, 1.5); printf(\u0026#34;printing the float constant %f\\n\u0026#34;, 15.6); return 0; } Data Types # Type C Type Memory Integer int 32 bits Real Number float 32 bits Character char 8 bits Expressions # printf(\u0026#34;circumference is %f\u0026#34;, 2*3.14*5); Giving Input: scanf # int r = 5; printf(\u0026#34;Enter the value of radius:\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;r); float circumference = 2*3.14*r; printf(\u0026#34;radius is %d, circumference is %f\u0026#34;, radius circumference); Reading # Chapter 2 Computer Science: A Structured Programming Approach Using C Behrouz A. Forouzan, Richard F. Gilberg\nThanks # "},{"id":7,"href":"/c_lib_ref/","title":"C Library Reference","section":"Introduction","content":" C Library Reference # File I/O\nStrings\nDate Time\nRandom Number Generation\nSorting \u0026amp; Searching\nAnother C Library Reference\n"},{"id":8,"href":"/grading_scheme/","title":"Grading Scheme","section":"Introduction","content":" Grading Scheme # Assignments: 30% Labs: 20% Mid-Semester Exam: 20% End-Semester Exam: 30% "},{"id":9,"href":"/honor_code/","title":"Honor Code","section":"Introduction","content":" Honor Code # Any form of plagiarism in the Assignments or in the Lab Exams would be heavily penalised and would lead to a 0 score for both students, the student who copied and the one whose code was copied. It is solely your duty to ensure the safety of your code throughout the course .Thus, we will not be entertaining any requests after a student is found guilty of plagiarism.\n"},{"id":10,"href":"/docs/course_material/labs/0/","title":"Lab 0","section":"Labs","content":" Welcome to CS0.101 Lab 0 # https://cpro-iiit.github.io/docs/course_material/labs/0/lab0.pdf\nIntroduction # Coding can be learnt only by solving programming problems!\n80% of the weightage of evaluations is on programming problems.\nGoal: Solve 8-9 programming problems every week. (3 in lab, 2 in tutorial, 1-2 in assignment, 2 in practice) Solve 100 over the entire course.\nLab sessions are evaluated (2% marks per lab, 20% for 10 labs).\nWhat\u0026rsquo;s the plan for Lab 0? # Help you set up the coding environment. Download problems from AutoLab (https://pingala.iiit.ac.in) and learn the basic tools required for coding. Submitting solutions and seeing the score. Problem-1, Solve a \u0026ldquo;Hello World\u0026rdquo; problem. Problem-2, Print \u0026ldquo;Hello World! I am learning Computer Programming in C, And it is awesome!\u0026rdquo; Some Buzz Words! # AutoLab: where all labs/assignments problems are set. You can download handouts and upload solutions (or handins). Autolab will automatically grade your solutions and give you a score. You will also get feedback on code from TAs here. You can access autolab in 2 ways.\nThrough the website https://pingala.iiit.ac.in Through autolab commands in the pingala shell. Pingala Shell: where you will do all the coding. The pingala shell is a standard Ubuntu Linux shell with all the programs required for this course. This also ensures that the outputs/errors you encounter are similar for the entire batch.\n1. Basic Setup # 1.1 Reseting Password for AutoLab: # Open a browser and go to https://pingala.iiit.ac.in (the web interface for autolab). Reset your password using forgot password. The username is the IIIT email id. Goto Outlook Mailbox for instructions for reset. After resetting, login to the site and keep this browser window open, as it is also needed for step 1.3. Remember this password! It will be used for all labs, assignments and exams.\n1.2 Open pingala shell: # Open the Terminal in lab machines and run the command ssh \u0026lt;your_iiit_username\u0026gt;@pingala.iiit.ac.in Enter your IIIT CAS password to open the pingala shell. pingala shell is a standard Ubuntu Linux shell with all the programs required for this course.\n1.3 Setup AutoLab in the shell: # Run the following command for setting up autolab in pingala shell autolab setup Copy the 6-character access code and paste it into https://pingala.iiit.ac.in/activate in the same browser window where you logged in. More info: https://docs.autolabproject.com/command-line-interface/ 2. Download Problems/Basic Tools for Coding # 2.1 Download Problems # Run the command autolab courses to list the courses\nRun the command autolab asmts \u0026lt;course_id\u0026gt; to list the assesments under the courses. \u0026lt;course_id\u0026gt; is \u0026ldquo;cs0-101-m24\u0026rdquo; for this course (as shown by the previous command)\nRun the command autolab download \u0026lt;course_id\u0026gt;:\u0026lt;asmts_id\u0026gt; to download the handout for Lab 0. \u0026lt;asmts_id\u0026gt; is \u0026ldquo;lab0\u0026rdquo; for Lab 0 (as shown by the previous command)\nMore Info: https://docs.autolabproject.com/command-line-interface/\n2.2 Navigate folders, edit code, extract/create tar archive in \u0026lsquo;pingala shell\u0026rsquo; # use tar xvf \u0026lt;file_name\u0026gt; to unzip tar archives tar xvflab0-handout.tar. More about tar file: https://en.wikipedia.org/wiki/Tar_(computing) use cd lab0-handout/ and ls to check the assessment files (driver.sh, Makefile, p1, p2, README) use nano p1/main.c to open C file for the lab0/problem-1 use nano \u0026lt;file_name\u0026gt; to edit \u0026lt;file_name\u0026gt; as a text file. e.g. nano p1/main.c, nano p2/main.c\nEdit your code and use ctrl+o to write the code. Hit enter to save, and use ctrl+x to exit the nano editor. More about nano editor: https://www.nano-editor.org/\nuse cd .. to exit the current directory\nuse tar cvf \u0026lt;tar_file_name\u0026gt;.tar \u0026lt;folder_name\u0026gt; to create a tar archive (similar to a zip file) for the folder \u0026lt;folder_name\u0026gt;. e.g. tar cvf lab0-handin.tar lab0-handout\nrun ls to check the created tar files.\nMore Info: https://missing.csail.mit.edu/2020/course-shell/\n2.5 Test your solutions locally # run make all to compile both your problem solutions. If it runs inside the problem directory, only that problem is compiled run ./main in each problem directory to see your program running run sh driver.sh to see your program running on test cases 3. Submitting Solutions/Seeing Score # 3.1 Submit solutions # go 1 directory above using cd .. (now ls should show lab0-handout directory) and create a tar archive of the entire assessment by running tar cvf lab0-handin.tar lab0-handout submit l0-handin.tar using the command autolab submit lab0-handin.tar 3.2 See your score # To check your score run autolab scores Latest submission score will be consider for grading Logout from the pingala shell by running logout Logout from pingala.iiit.ac.in too 4. Solve Lab 0 # Problem-1\nProblem-2\n4.1 Coding Treasure Hunt! # Use the above clues to solve lab 0 with full marks.\nMake guesses and try it out.\nOnly when you are completely stuck, ask others.\nUnderstand why a guess didn\u0026rsquo;t work out. Read the Error and debug it accordingly.\nC-error debug: https://naagar.notion.site/C-Error-debug-197096220a264f53a994742fd2d4971d\nHonor Code # When you copy, you are only damaging yourself!\nWhen you allow your friend to copy, you are not helping your friend!\nWe will run your code for Plagiarism Detection.\nQuestions # Can I use my computer/editor for coding? # Yes. You can access Autolab through the website (https://pingala.iiit.ac.in) if you are connected to the IIIT network directly or indirectly through VPN (https://vpn.iiit.ac.in/).\nAutolab command line could also be installed in Linux systems using directions provided at the links below:\nhttps://github.com/autolab/autolab-cli\nhttps://docs.autolabproject.com/command-line-interface/\nHowever, it\u0026rsquo;s recommended to use the pingala shell where everything is already installed. This ensures that you can get help from your colleagues and TAs easily. This is also the same setup used for all exams.\n5.1 Other optional Helpuful shell commands, Delete files/ folders using shell # use rm \u0026lt;file_name\u0026gt; to delete a file. e.g. rm p1/main.c use rm -r \u0026lt;folder_name\u0026gt; to delete a folder. e.g. rm -r p1 use -f flag to delete a file/folder without asking for confirmation. e.g. rm -f p1/main.c, rm -f p1, rm -f lab0 use rm -rf \u0026lt;folder_name\u0026gt; to delete a folder and all its contents. e.g. rm -rf lab0-handout use ls command to list folders and files in the current directory use cd to change the directory. e.g. cd lab0/ use arrow keys (up and down) to check the command history. 5.2 creating file/folder and copying files/folders using shell # use touch \u0026lt;file_name\u0026gt; to create a file. e.g. touch p1/main.c use mkdir \u0026lt;folder_name\u0026gt; to create a folder. e.g. mkdir p1 use cp \u0026lt;file_name\u0026gt; \u0026lt;destination_folder_name\u0026gt; to copy a file to a folder. e.g. cp p1/main.c p2/ use cp -r \u0026lt;source_folder_name\u0026gt; \u0026lt;destination_folder_name\u0026gt; to copy a folder to another folder. e.g. cp -r p1 p2 Happy Programming!\nCoding is not just a skill, it\u0026rsquo;s an adventure in logic and creativity. Writing code is like solving a puzzle, one piece at a time. Programming is like playing with Lego bricks, building something amazing from scratch. https://scratch.mit.edu/ Think outside the box, code inside the lines. "},{"id":11,"href":"/references/","title":"References","section":"Introduction","content":" References from the web # Dive into C Textbook\nC Programing Textbook\nC Programming Wikibook\nVariables, functions, arrays, strings\nC Structs and Pointers\nThe C Book by Banahan, Brady, Doran\nPractical Programming in C (MIT OCW)\nObject-Oriented Programming With ANSI-C\nC and Unix Documentation from the Stanford CS Education Library\nC Primer from Brown: Part 1 Part 2 Part 3: Debugging\nA C programming course by Steve Summit, online course material\nProgramming in C by A.D. Marshall, notes and examples\nRecursive and Loopy GCD in C\nSieve of Eratosthenes in C\n"},{"id":12,"href":"/tas/","title":"Teaching Assistants","section":"Introduction","content":" Teaching Assistants # Pramod Rao | pramod.b@research.iiit.ac.in Shreeya Singh | shreeya.singh@students.iiit.ac.in Aditya Malhotra | aditya.malhotra@students.iiit.ac.in Anushka Agrawal | anushka.agrawal@students.iiit.ac.in Ayan Datta | ayan.datta@research.iiit.ac.in Bhargav Srinivas | bhargav.srinivas@students.iiit.ac.in Dheeraja Rajreddygari | dheeraja.rajreddygari@students.iiit.ac.in Harshvardhan | harshvardhan.sv@research.iiit.ac.in Keval Jain | keval.jain@research.iiit.ac.in Kriti Gupta | kriti.gupta@research.iiit.ac.in Kushagra Kharbanda | kushagra.kharbanda@students.iiit.ac.in Kyrylo Shyvam Kumar | kyrylo.shyvam@students.iiit.ac.in Manav Shah | shah.devendrakumar@students.iiit.ac.in Mihika Sanghi | mihika.sanghi@research.iiit.ac.in Mitansh Kayathwal | mitansh.kayathwal@students.iiit.ac.in Sriteja Pashya | sriteja.pashya@research.iiit.ac.in Ujjwal Shekhar | ujjwal.shekhar@research.iiit.ac.in "},{"id":13,"href":"/docs/course_material/template/","title":"Template","section":"Course Material","content":" Course material template # Question 1 # The question body would go here\nText # Linked list can be defined as either a node structure doing nothing or one that is pointing to another linked list\nLinks # See linked: Recursion\nButton # Get Home Contribute Columns # Left Content Lorem markdownum insigne\u0026hellip;\nMid Content Lorem markdownum insigne\u0026hellip;\nRight Content Lorem markdownum insigne\u0026hellip;\nExpand # Expand ↕ Markdown content # Lorem markdownum insigne\u0026hellip;\nHint # Warning: Make sure to always free up memory!\nKaTeX # \\(f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\) Tabs # MacOS MacOS Content # Linux Linux Content # Windows Windows Content # Code # typedef struct node { struct node* nxt; // will point to the next node in the linked list if any int val; // store whatever else you might need } Node; int main() { // Code here } "},{"id":14,"href":"/tools/","title":"Tools","section":"Introduction","content":" gdb # Valgrind # "}]